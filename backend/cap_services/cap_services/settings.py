"""
Django settings for cap_services project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from decouple import config
from corsheaders.defaults import default_headers
import os, sys
import ast

from os.path import join

def _insert_sys_path(index, path):
    """ insert "path" to sys.path if "path" not in sys.path
    """
    if path not in sys.path:
        sys.path.insert(index, path)


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('DJANGO_KEY')

# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = ast.literal_eval(config('DEVELOPMENT'))


ALLOWED_HOSTS = ast.literal_eval(config('ALLOWED_HOSTS'))


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
     'clients',
    'data_collection',
    'fee_manage',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'rest_framework_swagger',
     'outlook_app',
     'cap_outlook_service',
    'django_crontab',
    'drf_api_logger',
    'auditlog',
    'django.contrib.humanize',
    'dashboard',
    'storages',
    'tinymce',

]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'drf_api_logger.middleware.api_logger_middleware.APILoggerMiddleware',
    'auditlog.middleware.AuditlogMiddleware',
    'clients.middleware.request_middleware.RequestUserMiddleware'
]

CORS_ORIGIN_ALLOW_ALL = ast.literal_eval(config('CORS_ORIGIN_ALLOW_ALL'))
CORS_ALLOWED_ORIGINS = ast.literal_eval(config('CORS_ALLOWED_ORIGINS'))


CORS_ALLOW_HEADERS = list(default_headers)+['type','authtoken']

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'rest_framework.authentication.TokenAuthentication',
        'clients.authentication.XMirrorTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication'  # For swagger session auth
    ],
    'EXCEPTION_HANDLER': 'clients.exceptions.custom_exception_handler',
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',  # For swagger
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
}

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'api_key': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization'
        }
    },
}

ROOT_URLCONF = 'cap_services.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cap_services.wsgi.application'

DATABASE_ROUTERS = ['cap_services.router.Router']
DATABASE_APPS_MAPPING = {'data_collection': 'mongo_db'}

DATABASES = {
     'default': {
         'ENGINE': config('DB_ENGINE'),
         'NAME': config('DB_NAME'),
         'USER': config('DB_USER'),
         'PASSWORD': config('DB_PASSWORD'),
         'HOST': config('DB_HOST'),
         'PORT': config('DB_PORT'),
     },
    #'default': {
    'mongo_db': {
           'ENGINE': config('MONGO_DB_ENGINE'),
           'ENFORCE_SCHEMA': False ,
           'NAME':  config('MONGO_DB_NAME'),
           #'HOST': "127.0.0.1",
           #'PORT' : 27017,
           #'USER' : "capdev_user",
           #'PASSWORD' : "lol!@#CAP",
           #'AUTH_SOURCE': "cap_dev2020",
           #'AUTH_MECHANISM': 'SCRAM-SHA-1'
           'CLIENT': {
               'host': config('MONGO_DB_HOST'),
               'port': 27017,
            #    'username': config('MONGO_DB_USER'),
            #    'password': config('MONGO_DB_PASSWORD'),
               'authSource': config('MONGO_DB_NAME'),
            #    'authMechanism': 'SCRAM-SHA-1'
           }
     }


}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
LOGIN_URL = '/admin'
LOGOUT_URL = '/admin/logout/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

BASE_URL = config('BASE_URL')

DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
MEDIA_URL = os.path.join(BASE_URL, 'api/media/')
MEDIA_PATH = MEDIA_URL
STATIC_URL = '/api/static/'
AWS_STORAGE_BUCKET_NAME = config("AWS_STORAGE_BUCKET_NAME")
AWS_S3_REGION_NAME = config("AWS_S3_REGION_NAME")
AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY")
# Tell django-storages the domain to use to refer to static files.
IS_S3=False
USE_S3 = config("USE_S3")
if USE_S3 == 'True':
    IS_S3=True
    AWS_S3_ENDPOINT_URL = 'https://%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME
    MEDIA_URL = AWS_S3_ENDPOINT_URL + '/media/'
    MEDIA_PATH = AWS_S3_ENDPOINT_URL + '/' +AWS_STORAGE_BUCKET_NAME +  '/media/'

    # Tell the staticfiles app to use S3Boto3 storage when writing the collected static files (when
    # you run `collectstatic`).
    # STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    STATICFILES_LOCATION = 'static'
    STATICFILES_STORAGE = 'custom_storages.StaticStorage'
    MEDIAFILES_LOCATION = 'media'
    DEFAULT_FILE_STORAGE = 'custom_storages.MediaStorage'




GRAPH_URL = 'https://graph.microsoft.com/v1.0'

# MICROSOFT AUTHETICATION PARAMETERS
# APP_ID = "c400025d-652b-4539-a0fc-c8ac893a5fb4"
# APP_SECRET = ".0SN~cdpICD4_FP~.KC7U-w5o03Or9tT8h"
# TENANT_ID = "f8cdef31-a31e-4b4a-93e4-5f571e91255a"
# REDIRECT =  "http://localhost:8000/api/callback"
REDIRECT =  config('REDIRECT_URL')
SCOPES = "openid profile offline_access user.read calendars.readwrite mail.readwrite mail.send"
AUTHORITY =  config('MICROSOFT_AUTHORITY')
AUTHORIZE_ENDPOINT = config('MICROSOFT_AUTHORIZE_ENDPOINT')
TOKEN_ENDPOINT = config('MICROSOFT_TOKEN_ENDPOINT')
CALLBACK_OUTLOOK_URL = config('CALLBACK_OUTLOOK_URL')



CRONJOBS = [
    ('05 0 * * *', 'clients.cron_jobs.UpdateNotificationCount', '>> /var/log/appcron/notification_update_job.log'),
    ('00 1 * * 5', 'clients.cron_jobs.SendWeeklyChecklistReport', '>> /var/log/appcron/weekly_checklist_mail_send.log'),
    ('00 1 1 * *', 'clients.cron_jobs.SendMonthlyChecklistReport', '>> /var/log/appcron/monthly_checklist_mail_send.log'),
    ('05 1 * * *', 'clients.cron_jobs.ResetAdvisorDeclaration', '>> /var/log/appcron/advisor_declaration_reset.log'),
    ('*/5 * * * *', 'outlook_app.cron_jobs.MailFoldersUpdate', '>> /var/log/appcron/folder_scheduled_job.log'),
    ('*/5 * * * *', 'outlook_app.cron_jobs.CalendarEventsUpdate', '>> /var/log/appcron/event_scheduled_job.log'),
    ('*/5 * * * *', 'outlook_app.cron_jobs.MailsUpdate', '>> /var/log/appcron/mail_scheduled_job.log'),
    ('*/5 * * * *', 'outlook_app.cron_jobs.ParseLOAMails', '>> /var/log/appcron/loa_scheduled_job.log'),
    ('05 2 * * *', 'clients.cron_jobs.Resetlogs', '>> /var/log/appcron/reset_log_data.log'),
]


# *    *    *    *    *  command to execute
# ┬    ┬    ┬    ┬    ┬
# │    │    │    │    │
# │    │    │    │    │
# │    │    │    │    └───── day of week (0 - 6) (0 to 6 are Sunday to Saturday)
# │    │    │    └────────── month (1 - 12)
# │    │    └─────────────── day of month (1 - 31)
# │    └──────────────────── hour (0 - 23)
# └───────────────────────── min (0 - 59)



# Celery application definition
CELERY_BROKER_URL = config('CELERY_BROKER_URL')
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'



CALLBACK_OUTLOOK_URL=config('CALLBACK_OUTLOOK_URL')

DATA_EXTRACTION_URL=config('DATA_EXTRACTION_URL')

ILLUSTRATION_EXTRACTION_URL=config('ILLUSTRATION_EXTRACTION_URL')


SMART_SEARCH_URL =config('SMART_SEARCH_URL') 
SMART_SEARCH_TOKEN = config('SMART_SEARCH_TOKEN')
SMART_SEARCH_EMAIL = config('SMART_SEARCH_EMAIL')
COMPANY_NAME = config('COMPANY_NAME')

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_SENDER = 'capsuperuser2020@gmail.com'
EMAIL_REPLY = 'capsuperuser2020@gmail.com'

EMAIL_USE_TLS = True
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
EMAIL_PORT = config('EMAIL_PORT')

CAP_SUPERUSER_EMAIL='capsuperuser2020@outlook.com'

#TO DO - save in db and fetch from db
COLOR_SCHEME = {'first':{'background':'#caf3fb', 'font':'#006070', 'occurence':'first'}, 'second':{'background':'#ffe2ed', 'font':'#ff1493', 'occurence':'second'}, 'fourth':{'background':'#cbf5d4', 'font':'#008e1c', 'occurence':'fourth'}, 'default':{'background':'#ffebd6', 'font':'#ff8000', 'occurence':'other'}}

DRF_API_LOGGER_DATABASE = True  # Default to False


ADMINS = ast.literal_eval(config('ADMIN_EMAILS'))

EMAIL_SUBJECT_PREFIX = config('ERROR_MAIL_PREFIX')+'  '  

TINYMCE_JS_ROOT = 'https://cdnjs.cloudflare.com/ajax/libs/tinymce/5.9.2/'
TINYMCE_JS_URL = os.path.join(TINYMCE_JS_ROOT, "tinymce.min.js")

TINYMCE_DEFAULT_CONFIG = {
        "theme": "silver",
        "height": 500,
        "menubar": False,
        "plugins": "advlist,autolink,lists,link,image,charmap,print,preview,anchor,"
        "searchreplace,visualblocks,code,fullscreen,insertdatetime,media,table,paste,"
        "code,help,wordcount",
        "toolbar": "undo redo | bullist ",
        # "toolbar": "undo redo | formatselect | bold italic backcolor | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | help",
}
